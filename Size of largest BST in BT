import java.awt.desktop.PreferencesEvent;

public class Largestbst {
    static class Node {
        int data;
        Node left;
        Node right;
        Node(int data){
            this.data = data;
        }
    }
    static class info{
        boolean isbst;
        int size;
        int min;
        int max;
        info(boolean isbst,int size ,int min ,int max){
            this.isbst = isbst;
            this.size =size;
            this.min = min;
            this.max = max;
        }
    }
    public static int  maxBST =0;
    public static  info largest(Node root){
        if (root == null){
            return  new info(true,0,Integer.MAX_VALUE,Integer.MIN_VALUE);
        }
        info leftside = largest(root.left);
        info rightside = largest(root.right);
        int size = leftside.size + rightside.size+1;
        int min  = Math.min(root.data,Math.min(leftside.min, rightside.min));
        int max = Math.max(root.data,Math.max(leftside.max, rightside.max));
        if (root.data <= leftside.max || root.data >= rightside.min){
            return new info(false,size,min,max);
        }
        if (leftside.isbst && rightside.isbst){
            maxBST = Math.max(maxBST,size);
            return new info(true,size,min,max);
        }
        return new info(false,size,min,max);
    }

    public static void main(String[] args) {
        Node root = new Node(50);
        root.left = new Node(30);
        root.left.left = new Node(5);
        root.left.right = new Node(20);
        root.right = new Node(60);
        root.right.left = new Node(45);
        root.right.right = new Node(70);
        root.right.right.left = new Node(65);
        root.right.right.right = new Node(80);
        largest(root);
        System.out.print(" largest Hieght -> " + maxBST);
    }
}
